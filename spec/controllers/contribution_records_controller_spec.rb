require 'spec_helper'
require 'ruby-debug'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ContributionRecordsController do

  # This should return the minimal set of attributes required to create a valid
  # ContributionRecord. As you add validations to ContributionRecord, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { :election_year => "2012-01-01",
      :cand_last => "Man",
      :cand_first => "He",
      :cand_mid => "Da",
      :party => "REP",
      :district => "1",
      :office => "Gov",
      :contr_date => "2012-12-20",
      :contr_amount => "99",
      :contr_last => 'Public',
      :contr_first => 'John',
      :contr_mid => 'Q.',
      :contr_type => 'I',
      :contr_mailing => '100 Main',
      :contr_city    => 'Anywhere',
      :contr_st      => 'ID',
      :contr_zip     => 83704
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ContributionRecordsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all contribution_records as @contribution_records" do
      contribution_record = ContributionRecord.create! valid_attributes
      get :index, {}, valid_session
      assigns(:contribution_records).should eq([contribution_record])
    end
  end

  describe "GET show" do
    it "assigns the requested contribution_record as @contribution_record" do
      contribution_record = ContributionRecord.create! valid_attributes
      get :show, {:id => contribution_record.to_param}, valid_session
      assigns(:contribution_record).should eq(contribution_record)
    end
  end

  describe "GET new" do
    it "assigns a new contribution_record as @contribution_record" do
      get :new, {}, valid_session
      assigns(:contribution_record).should be_a_new(ContributionRecord)
    end
  end

  describe "GET edit" do
    it "assigns the requested contribution_record as @contribution_record" do
      contribution_record = ContributionRecord.create! valid_attributes
      get :edit, {:id => contribution_record.to_param}, valid_session
      assigns(:contribution_record).should eq(contribution_record)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new ContributionRecord" do
        expect {
          post :create, {:contribution_record => valid_attributes}, valid_session
        }.to change(ContributionRecord, :count).by(1)
      end

      it "assigns a newly created contribution_record as @contribution_record" do
        post :create, {:contribution_record => valid_attributes}, valid_session
        assigns(:contribution_record).should be_a(ContributionRecord)
        assigns(:contribution_record).should be_persisted
      end

      it "redirects to the created contribution_record" do
        post :create, {:contribution_record => valid_attributes}, valid_session
        response.should redirect_to(ContributionRecord.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved contribution_record as @contribution_record" do
        # Trigger the behavior that occurs when invalid params are submitted
        ContributionRecord.any_instance.stub(:save).and_return(false)
        post :create, {:contribution_record => {  }}, valid_session
        assigns(:contribution_record).should be_a_new(ContributionRecord)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        ContributionRecord.any_instance.stub(:save).and_return(false)
        post :create, {:contribution_record => {  }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested contribution_record" do
        contribution_record = ContributionRecord.create! valid_attributes
        # Assuming there are no other contribution_records in the database, this
        # specifies that the ContributionRecord created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        ContributionRecord.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
        put :update, {:id => contribution_record.to_param, :contribution_record => { "these" => "params" }}, valid_session
      end

      it "assigns the requested contribution_record as @contribution_record" do
        contribution_record = ContributionRecord.create! valid_attributes
        put :update, {:id => contribution_record.to_param, :contribution_record => valid_attributes}, valid_session
        assigns(:contribution_record).should eq(contribution_record)
      end

      it "redirects to the contribution_record" do
        contribution_record = ContributionRecord.create! valid_attributes
        put :update, {:id => contribution_record.to_param, :contribution_record => valid_attributes}, valid_session
        response.should redirect_to(contribution_record)
      end
    end

    describe "with invalid params" do
      it "assigns the contribution_record as @contribution_record" do
        contribution_record = ContributionRecord.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ContributionRecord.any_instance.stub(:save).and_return(false)
        put :update, {:id => contribution_record.to_param, :contribution_record => {  }}, valid_session
        assigns(:contribution_record).should eq(contribution_record)
      end

      it "re-renders the 'edit' template" do
        contribution_record = ContributionRecord.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        ContributionRecord.any_instance.stub(:save).and_return(false)
        put :update, {:id => contribution_record.to_param, :contribution_record => {  }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested contribution_record" do
      contribution_record = ContributionRecord.create! valid_attributes
      expect {
        delete :destroy, {:id => contribution_record.to_param}, valid_session
      }.to change(ContributionRecord, :count).by(-1)
    end

    it "redirects to the contribution_records list" do
      contribution_record = ContributionRecord.create! valid_attributes
      delete :destroy, {:id => contribution_record.to_param}, valid_session
      response.should redirect_to(contribution_records_url)
    end
  end

end
